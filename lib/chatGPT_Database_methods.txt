import 'package:flutter/material.dart';
import 'database_helper.dart';
import 'contact.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Contact> _contacts = [];

  @override
  void initState() {
    super.initState();
    _queryContacts();
  }

  // Insert a new contact into the database
  Future<void> _insertContact() async {
    Contact contact = Contact(
      photoUrl: 'https://example.com/image.png',
      name: 'John Doe',
      mobile: '555-555-1234',
      email: 'john.doe@example.com',
    );
    int id = await DatabaseHelper.instance.insert(contact);
    print('Inserted contact with id: $id');
    _queryContacts();
  }

  // Retrieve all contacts from the database
  Future<void> _queryContacts() async {
    List<Contact> contacts = await DatabaseHelper.instance.queryAllRows();
    setState(() {
      _contacts = contacts;
    });
  }

  // Update a contact in the database
  Future<void> _updateContact() async {
    Contact contact = _contacts.first;
    contact.name = 'Jane Smith';
    int rowsUpdated = await DatabaseHelper.instance.update(contact);
    print('Updated $rowsUpdated rows');
    _queryContacts();
  }

  // Delete a contact from the database
  Future<void> _deleteContact() async {
    Contact contact = _contacts.first;
    int rowsDeleted = await DatabaseHelper.instance.delete(contact.id);
    print('Deleted $rowsDeleted rows');
    _queryContacts();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Contacts'),
      ),
      body: ListView.builder(
        itemCount: _contacts.length,
        itemBuilder: (context, index) {
          Contact contact = _contacts[index];
          return ListTile(
            leading: Image.network(contact.photoUrl),
            title: Text(contact.name),
            subtitle: Text(contact.mobile),
            trailing: Text(contact.email),
          );
        },
      ),
      floatingActionButton: Row(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          FloatingActionButton(
            onPressed: _insertContact,
            tooltip: 'Insert Contact',
            child: Icon(Icons.add),
          ),
          SizedBox(width: 10),
          FloatingActionButton(
            onPressed: _updateContact,
            tooltip: 'Update Contact',
            child: Icon(Icons.edit),
          ),
          SizedBox(width: 10),
          FloatingActionButton(
            onPressed: _deleteContact,
            tooltip: 'Delete Contact',
            child: Icon(Icons.delete),
          ),
        ],
      ),
    );
  }
}
